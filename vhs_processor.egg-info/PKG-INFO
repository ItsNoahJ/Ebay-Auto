Metadata-Version: 2.2
Name: vhs_processor
Version: 0.1.0
Summary: VHS tape processing and identification tool
Home-page: https://github.com/yourusername/vhs-processor
Author: Your Name
Author-email: your.email@example.com
Classifier: Development Status :: 3 - Alpha
Classifier: Environment :: Console
Classifier: Intended Audience :: End Users/Desktop
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Topic :: Multimedia :: Graphics
Classifier: Topic :: Scientific/Engineering :: Image Processing
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: sqlalchemy>=2.0.0
Requires-Dist: python-dotenv>=1.0.0
Requires-Dist: requests>=2.31.0
Requires-Dist: opencv-python>=4.8.0
Requires-Dist: pytesseract>=0.3.10
Requires-Dist: numpy>=1.24.0
Requires-Dist: Pillow>=10.0.0
Requires-Dist: pytest>=7.4.0
Requires-Dist: pytest-asyncio>=0.21.1
Requires-Dist: flet>=0.10.0
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# Media Processor

A powerful media digitization and cataloging tool that supports multiple physical media formats:
- VHS Tapes
- DVDs
- CDs
- Vinyl Records
- Cassette Tapes

## Features

- Modern, responsive GUI built with Flet
- Support for multiple media types with specialized processing for each format
- Image processing and OCR for text extraction
- Integration with movie and music databases
- Automatic metadata extraction
- Results saving and export
- Drag-and-drop interface

## Installation

1. Clone the repository:
```bash
git clone [repository-url]
cd [repository-name]
```

2. Install dependencies:
```bash
pip install -r requirements.txt
```

3. Install Tesseract OCR (required for text extraction):
- Windows: Download and install from https://github.com/UB-Mannheim/tesseract/wiki
- Linux: `sudo apt-get install tesseract-ocr`
- macOS: `brew install tesseract`

4. Set up environment variables:
```bash
cp .env.example .env
```
Then edit .env with your API keys and configurations.

## Usage

1. Start the application with the modern Flet interface:
```bash
python src/main.py
```

Or use the legacy PyQt interface:
```bash
python src/main.py --interface pyqt
```

2. Select your media type from the dropdown menu
3. Load an image by either:
   - Dragging and dropping onto the interface
   - Clicking "Select Image" and choosing a file
4. Click "Process Media" to begin analysis
5. Results will be saved to the storage/results directory

## Development

### Project Structure

```
src/
â”œâ”€â”€ flet_gui/        # Modern Flet-based GUI
â”œâ”€â”€ gui/             # Legacy PyQt GUI
â”œâ”€â”€ models/          # Core data models and processors
â”œâ”€â”€ vision/          # Image processing and OCR
â”œâ”€â”€ enrichment/      # API integrations for metadata
â”œâ”€â”€ utils/           # Helper utilities
â””â”€â”€ config/          # Configuration management
```

### Adding New Media Types

1. Create a new processor class in `src/models/media_types.py`
2. Implement the `process()` method with format-specific logic
3. Add any necessary API integrations in `src/enrichment/`
4. Update tests and documentation

## Contributing

Contributions are welcome! Please feel free to submit a Pull Request.

## License

[Your chosen license]
